/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FaWatchDogServer_TYPES_H
#define FaWatchDogServer_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace faWatchDogServer {

typedef struct _TagServiceHeartRequest__isset {
  _TagServiceHeartRequest__isset() : serviceID(false) {}
  bool serviceID;
} _TagServiceHeartRequest__isset;

class TagServiceHeartRequest {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  TagServiceHeartRequest() : serviceID(0) {
  }

  virtual ~TagServiceHeartRequest() throw() {}

  int32_t serviceID;

  _TagServiceHeartRequest__isset __isset;

  void __set_serviceID(const int32_t val) {
    serviceID = val;
  }

  bool operator == (const TagServiceHeartRequest & rhs) const
  {
    if (!(serviceID == rhs.serviceID))
      return false;
    return true;
  }
  bool operator != (const TagServiceHeartRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TagServiceHeartRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TagServiceHeartRequest &a, TagServiceHeartRequest &b);

typedef struct _TagServiceHeartResponse__isset {
  _TagServiceHeartResponse__isset() : confirmInfo(false) {}
  bool confirmInfo;
} _TagServiceHeartResponse__isset;

class TagServiceHeartResponse {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TagServiceHeartResponse() : confirmInfo() {
  }

  virtual ~TagServiceHeartResponse() throw() {}

  std::string confirmInfo;

  _TagServiceHeartResponse__isset __isset;

  void __set_confirmInfo(const std::string& val) {
    confirmInfo = val;
  }

  bool operator == (const TagServiceHeartResponse & rhs) const
  {
    if (!(confirmInfo == rhs.confirmInfo))
      return false;
    return true;
  }
  bool operator != (const TagServiceHeartResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TagServiceHeartResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TagServiceHeartResponse &a, TagServiceHeartResponse &b);

} // namespace

#endif
